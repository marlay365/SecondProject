pipeline {
   agent any

   tools {
      // Install the Maven version configured as "maven" and add it to the path.
      maven "maven"
	  jdk "java"
	  
   }
     parameters {
        string(name: 'ProjectKey', defaultValue: 'jahanvibansal_SecondProject')

        string(name: 'organization', defaultValue: 'payalbnsl-github', description: 'Enter some oraganization for sonar')

     	 booleanParam(name: 'qualityControlEnabled', defaultValue=false)
    }
     triggers {
       pollSCM('* * * * *')
   }

     options { 
         buildDiscarder(logRotator(numToKeepStr: '1')) 
    }

   stages {
   
   stage('Clean'){
   
     steps {
	sh 'mvn clean';
   }
   
   }
   stage("Github code"){
     steps {
      // Get some code from a GitHub repository
   
    git 'https://github.com/marlay365/SecondProject.git'
	}
	}
      stage('Build') {
         steps {
         
           

            // Run Maven on a Unix agent.
            sh "mvn -Dmaven.test.failure.ignore=true package"

            // To run Maven on a Windows agent, use
            // bat "mvn -Dmaven.test.failure.ignore=true  package"
         }

         post {
            // If Maven was able to run the tests, even if some of the test
            // failed, record the test results and archive the jar file.
            success {
               junit '**/target/surefire-reports/TEST-*.xml'
               archiveArtifacts 'target/*.war'
            }
         }
      }
	  
	  stage('quality check'){
	when{  expression { params.qualityControlEnabled }
	}
		steps{
			sh 'mvn verify sonar:sonar -Dsonar.projectKey=${params.ProjectKey} -Dsonar.organization=${params.organization} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=ac6b37b25715be9eb416af27e8badf7f066c3602'
		}
	}
	  
	  stage('Deploy to Prod'){
		input{
		 message "Deploy to Prod?"
		  ok "Yes, we should."
               
		}
		steps{
			echo "deploying to prod"
		}
	  
	  }
   }
}
